feature vn-segment
feature nv overlay 
feature vn-segment-vlan-based
feature interface-vlan
feature bgp
nv overlay evpn 
hardware access-list tcam region racl 512 	
hardware access-list tcam region arp-ether 256 double-wide 	
interface Vlan 1

{% set rank = lookup("topology","rank") %}
{% set underlay = lookup("topology","underlay") %}
{% set port_map = lookup('topology','port-map').split() %}
{% set local_as= lookup("bgp","evpn_as") -%}	
{% set index= lookup("topology","index") -%}	

interface loopback0
  ip address {{ underlay | ipsubnet(24,index) | ipsubnet(32,0) }} tag 666
{% if "s-spine-evpn" in groups %} {# MULticast address useless pour le moment/ todo multicast addr sur les tor #}
  ip pim sparse-mode
feature pim
ip pim rp-address 100.1.1.1 group-list 224.0.0.0/4
ip pim anycast-rp 100.1.1.1 10.1.1.1
ip pim anycast-rp 100.1.1.1 20.1.1.1
interface loopback1
  ip address 100.1.1.1/32
  ip pim sparse-mode
{% endif %}


{# UNDERLAY and Interfaces #}
{% for remote, local_port, remote_port in lookup('topology','fabric-topology').items() | myport  %}
  {% if "." not in remote %}
    {% set remote = "{}.{}.blade-group.net".format(remote,location) -%}
  {% endif %}
  {% set remote_as= lookup("bgp","evpn_as",remote) -%}	
  {% set scope_remote = scope(remote) -%}
  {% if rank < lookup("topology","rank",remote ) -%}
    {% set local_address = underlay | ipsubnet(24,index) | ipsubnet(31,local_port) %}
  {% else -%}
    {% set remote_index= lookup("topology","index",remote) -%}	
    {% set local_address = "{}/31".format(underlay | ipsubnet(24,remote_index) | ipsubnet(31,remote_port) | ippeer ) %} {# ouai c est degeux mais ca marche #}
  {% endif %}

interface {{ port_map[local_port|store("topology", remote, remote_port)]}}
  description "{{ "{}:{}".format(remote, remote_port) }}"
  ip address {{ local_address }}
  mtu 9216
  no switchport
  no shutdown

router bgp {{ local_as }}
  router-id {{ underlay | ipsubnet(24,index) | ipsubnet(32,0) | ipaddr('address') }}
  address-family ipv4 unicast
    maximum-paths 32
    redistribute direct route-map DIRECT-ROUTES-MAP
  {% if "edge" in remote %}
  vrf internet
    neighbor {{ local_address | ippeer }}
      description "{{ "EDGE_{}".format(scope_remote.shorthost) }}"
      remote-as {{ remote_as }}
      address-family ipv4 unicast
  {% else %}
  neighbor {{ local_address | ippeer }}
    description "{{ "UNDERLAY_{}".format(scope_remote.shorthost) }}"
    remote-as {{ remote_as }}
    address-family ipv4 unicast
    {% if "spine-evpn" in groups or "sspine-evpn" in groups  %}
      disable-peer-as-check 
    {% endif %}
      allowas-in 3
  {% endif %}
{% endfor %}

route-map DIRECT-ROUTES-MAP permit 10
  match tag 666

{# OVERLAY #}
{% for device in devices("environment","location", "groups==tor-evpn") if not device == "{}.blade-group.net".format(host,location) %}
  {% set scope_remote = scope(device) -%}
  {% set remote_as= 65000 -%}	
  {% set remote_index= lookup("topology","index",device) -%}	
    {% if ("tor-evpn-edge" in scope_remote.groups and "tor-evpn" in groups) or ("tor-evpn" in scope_remote.groups and "tor-evpn-edge" in groups) %}
router bgp {{ local_as }}
  address-family l2vpn evpn
    nexthop route-map NEXT-HOP-UNCH
    retain route-target all
  neighbor {{ underlay | ipsubnet(24,remote_index) | ipsubnet(32,0) | ipaddr('address') }}
    description "{{ "OVERLAY_{}".format(scope_remote.shorthost) }}"
    update-source loopback0
    remote-as {{ remote_as }}
    address-family l2vpn evpn
      send-community
      send-community extended
      route-map NEXT-HOP-UNCH out
      {% if "tor-evpn-edge" in groups %}
    route-reflector-client
      {% endif %}
    {% endif %}
{% endfor %}

route-map NEXT-HOP-UNCH permit 10
  set ip next-hop unchanged

{# vxlan #}
{% if not "tor-evpn-edge" in groups and "tor-evpn" in groups %}
fabric forwarding anycast-gateway-mac 0000.2222.3333
interface nve1
  no shutdown
  source-interface loopback0
  host-reachability protocol bgp
  
{# internet vrf #}
{% if "tor-evpn-edge" in groups %}
{% endif %}

{# l3 client #}
  {% set ns = namespace(vlan=3000) %}
  {% set already_seen = [] %}
  {% for client,info in lookup("topology","clients").items() %}

vrf context {{ client }}
 vni {{ info.vnil3 }}
 rd auto
 address-family ipv4 unicast
  route-target both auto
  route-target both auto evpn

vlan {{ info.vlan }}
  vn-segment {{ info.vnil3 }}

interface vlan {{ info.vlan }}
  no shutdown
  vrf member {{ client }}
  ip forward

router bgp {{ local_as }}
  vrf {{ client }}
    address-family ipv4 unicast

interface nve1
  member vni {{ info.vnil3 }} associate-vrf
{# l2 client #}

    {% for vlan, detail in info.vxlan.items() if detail.ports[shorthost] is defined %}

vlan {{ ns.vlan }}
  vn-segment {{ detail.vni }}

interface nve1
  member vni {{ detail.vni }}
    suppress-arp
    ingress-replication protocol bgp

interface vlan {{ ns.vlan }}
  no shutdown
  vrf member {{ client }}
  ip address {{ detail.subnet | ipaddr(-2) }}
  fabric forwarding mode anycast-gateway

evpn
  vni {{ detail.vni }} l2
    rd auto
    route-target import auto
    route-target export auto
      {% for port in detail.ports[shorthost] | default() | torange if detail.ports[shorthost] is defined %}
        
interface {{ port_map[port|store("topology", "linux-vni{}-p{}".format(detail.vni,port), 1)]}}
  switchport
  switchport access vlan {{ ns.vlan }}
  no shutdown
  description {{ "linux-vni{}-p{}".format(detail.vni,port) }}
      {% endfor %}
    {% set ns.vlan = ns.vlan + 1 %}
    {% endfor %}

    
  {% endfor %}
{% endif %}
